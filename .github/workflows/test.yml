name: Run Tests

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    name: Run Integration Tests
    runs-on: ubuntu-latest
    
    services:
      filebrowser:
        image: filebrowser/filebrowser
        ports:
          - 8080:8080
        options: --user=root --database=/database.db --root=/srv
        
    steps:
      - name: Check out code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: '1.21'

      - name: Wait for filebrowser to be ready
        run: |
          echo "Waiting for filebrowser service to start..."
          until curl -s -o /dev/null http://localhost:8080/health; do
            echo -n .
            sleep 1
          done
          echo "Filebrowser is up!"

      - name: Create filebrowser test user
        run: |
          docker exec ${{ job.services.filebrowser.id }} /filebrowser users add testuser testpass --perm.admin
          echo "Test user created."

      - name: Build fbcli
        run: go build -v -o fbcli

      - name: Run tests
        env:
          FILEBROWSER_URL: http://localhost:8080
          FILEBROWSER_USERNAME: testuser
          FILEBROWSER_PASSWORD: testpass
        run: |
          set -e  # Exit immediately if a command fails
          
          echo "--- Creating test assets ---"
          echo "hello world" > testfile.txt
          mkdir -p 'local test dir'
          echo "nested file" > 'local test dir/nested.txt'
          
          echo "--- Testing mkdir ---"
          ./fbcli mkdir '/test dir'
          
          echo "--- Testing single file upload ---"
          ./fbcli upload testfile.txt '/test dir'
          
          echo "--- Verifying single file upload with ls ---"
          ./fbcli ls '/test dir' | grep 'testfile.txt'
          
          echo "--- Testing directory upload ---"
          ./fbcli upload 'local test dir' '/'
          
          echo "--- Verifying directory upload with ls ---"
          ./fbcli ls '/local test dir' | grep 'nested.txt'
          
          echo "--- Testing directory download ---"
          ./fbcli download '/local test dir' 'downloaded_dir' # will be downloaded_dir.zip
          
          echo "--- Verifying directory download ---"
          ls | grep 'downloaded_dir.zip'
          unzip -l downloaded_dir.zip | grep 'nested.txt'
          
          echo "--- Testing rename ---"
          ./fbcli mv '/test dir' '/renamed dir'
          
          echo "--- Verifying rename with ls ---"
          ./fbcli ls '/' | grep 'renamed dir'
          
          echo "--- Testing rm (cleanup) ---"
          ./fbcli rm '/renamed dir/testfile.txt'
          ./fbcli rm '/renamed dir'
          ./fbcli rm '/local test dir/nested.txt'
          ./fbcli rm '/local test dir'
          
          echo "--- Verifying deletion with ls ---"
          if ./fbcli ls '/' | grep -E 'renamed dir|local test dir'; then
            echo "Error: A directory still exists after deletion."
            exit 1
          fi
          
          echo "All tests passed!"
