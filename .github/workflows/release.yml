name: Release

on:
  push:
    tags:
      - 'v*'

permissions:
  contents: write

jobs:
  build:
    name: Build Binaries
    runs-on: ubuntu-latest
    strategy:
      matrix:
        goos: [linux, windows]
        goarch: [amd64, arm64]
        exclude:
          - goos: windows
            goarch: arm64
    steps:
      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: '>=1.24'
      - name: Check out code
        uses: actions/checkout@v4
      - name: Build
        env:
          CGO_ENABLED: 0
          GOOS: ${{ matrix.goos }}
          GOARCH: ${{ matrix.goarch }}
        run: |
          VERSION_VAR="-X main.version=${{ github.ref_name }}"
          BINARY_NAME="fbcli"
          if [ "${{ matrix.goos }}" = "windows" ]; then
            BINARY_NAME="fbcli.exe"
          fi
          go build -v -ldflags="$VERSION_VAR" -o "${BINARY_NAME}"
          ASSET_NAME="fbcli-${{ matrix.goos }}-${{ matrix.goarch }}"
          if [ "${{ matrix.goos }}" = "windows" ]; then
            zip "${ASSET_NAME}.zip" "${BINARY_NAME}"
          else
            tar -czvf "${ASSET_NAME}.tar.gz" "${BINARY_NAME}"
          fi
      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: fbcli-${{ matrix.goos }}-${{ matrix.goarch }}
          path: fbcli-${{ matrix.goos }}-${{ matrix.goarch }}.*
          retention-days: 1

  release:
    name: Create GitHub Release
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Check out code
        uses: actions/checkout@v4
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts
      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: Release ${{ github.ref }}
          draft: false
          prerelease: false
      - name: Upload Release Assets (linux-amd64)
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./artifacts/fbcli-linux-amd64/fbcli-linux-amd64.tar.gz
          asset_name: fbcli-linux-amd64.tar.gz
          asset_content_type: application/gzip
      - name: Upload Release Assets (linux-arm64)
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./artifacts/fbcli-linux-arm64/fbcli-linux-arm64.tar.gz
          asset_name: fbcli-linux-arm64.tar.gz
          asset_content_type: application/gzip
      - name: Upload Release Assets (windows-amd64)
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./artifacts/fbcli-windows-amd64/fbcli-windows-amd64.zip
          asset_name: fbcli-windows-amd64.zip
          asset_content_type: application/zip
