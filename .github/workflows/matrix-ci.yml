name: CI and Release

on:
  push:
    branches: [ main ]
    tags:
      - 'v*'
  pull_request:
    branches: [ main ]

permissions:
  contents: write

jobs:
  # Job for full integration testing on Linux (amd64 and arm64)
  test-linux:
    name: Integration Test (Linux/${{ matrix.arch }})
    runs-on: ubuntu-latest
    strategy:
      matrix:
        arch: [amd64, arm64]
    
    services:
      filebrowser:
        image: filebrowser/filebrowser
        ports:
          - 8080:80
        
    steps:
      - name: Check out code
        uses: actions/checkout@v4

      - name: Set up QEMU
        if: matrix.arch == 'arm64'
        uses: docker/setup-qemu-action@v3

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: '>=1.24'

      - name: Download Go modules
        run: go mod download

      - name: Wait for filebrowser to be ready
        run: |
          echo "Waiting for filebrowser service to start..."
          until curl -s -o /dev/null http://localhost:8080/health; do
            echo -n .
            sleep 1
          done
          echo "Filebrowser is up!"

      - name: Capture filebrowser password
        id: fblog
        run: |
          docker logs ${{ job.services.filebrowser.id }} 2>&1 | awk '/password:/{print "fbpass="$NF}' >> $GITHUB_OUTPUT

      - name: Build fbcli
        env:
          CGO_ENABLED: 0
          GOARCH: ${{ matrix.arch }}
        run: |
          VERSION_VAR=""
          if [[ "${{ github.ref_type }}" == "tag" ]]; then
            VERSION_VAR="-X main.version=${{ github.ref_name }}"
          else
            VERSION_VAR="-X main.version=dev-$(echo ${{ github.sha }} | cut -c1-7)"
          fi
          go build -v -ldflags="$VERSION_VAR" -o fbcli

      - name: Run Integration Tests
        env:
          FILEBROWSER_URL: http://localhost:8080
          FILEBROWSER_USERNAME: admin
          FILEBROWSER_PASSWORD: ${{ steps.fblog.outputs.fbpass }}
        run: script/integration-test.sh

  # Job for smoke testing on other platforms
  test-smoke:
    name: Smoke Test (Windows/amd64)
    runs-on: windows-latest
            
    steps:
      - name: Check out code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: '>=1.24'

      - name: Download Go modules
        run: go mod download

      - name: Build and Smoke Test
        env:
          CGO_ENABLED: 0
        run: |
          VERSION_VAR=""
          if [[ "${{ github.ref_type }}" == "tag" ]]; then
            VERSION_VAR="-X main.version=${{ github.ref_name }}"
          else
            VERSION_VAR="-X main.version=dev-$(echo ${{ github.sha }} | cut -c1-7)"
          fi
          go build -v -ldflags="$VERSION_VAR" -o fbcli.exe
          ./fbcli.exe show
        shell: bash

  build:
    name: Build Binaries
    runs-on: ubuntu-latest
    needs: [test-linux, test-smoke]
    if: startsWith(github.ref, 'refs/tags/v')
    
    strategy:
      matrix:
        goos: [linux, windows]
        goarch: [amd64, arm64]
        exclude:
          - goos: windows
            goarch: arm64

    steps:
      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: '>=1.24'

      - name: Check out code
        uses: actions/checkout@v4

      - name: Build
        env:
          CGO_ENABLED: 0
          GOOS: ${{ matrix.goos }}
          GOARCH: ${{ matrix.goarch }}
        run: |
          VERSION_VAR="-X main.version=${{ github.ref_name }}"
          BINARY_NAME="fbcli"
          if [ "${{ matrix.goos }}" = "windows" ]; then
            BINARY_NAME="fbcli.exe"
          fi
          go build -v -ldflags="$VERSION_VAR" -o "${BINARY_NAME}"
          
          ASSET_NAME="fbcli-${{ matrix.goos }}-${{ matrix.goarch }}"
          if [ "${{ matrix.goos }}" = "windows" ]; then
            zip "${ASSET_NAME}.zip" "${BINARY_NAME}"
          else
            tar -czvf "${ASSET_NAME}.tar.gz" "${BINARY_NAME}"
          fi

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: fbcli-${{ matrix.goos }}-${{ matrix.goarch }}
          path: fbcli-${{ matrix.goos }}-${{ matrix.goarch }}.*
          retention-days: 1

  release:
    name: Create GitHub Release
    runs-on: ubuntu-latest
    needs: build
    if: startsWith(github.ref, 'refs/tags/v')
    
    steps:
      - name: Check out code
        uses: actions/checkout@v4

      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts

      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: Release ${{ github.ref }}
          draft: false
          prerelease: false

      - name: Upload Release Assets (linux-amd64)
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./artifacts/fbcli-linux-amd64/fbcli-linux-amd64.tar.gz
          asset_name: fbcli-linux-amd64.tar.gz
          asset_content_type: application/gzip

      - name: Upload Release Assets (linux-arm64)
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./artifacts/fbcli-linux-arm64/fbcli-linux-arm64.tar.gz
          asset_name: fbcli-linux-arm64.tar.gz
          asset_content_type: application/gzip

      - name: Upload Release Assets (windows-amd64)
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./artifacts/fbcli-windows-amd64/fbcli-windows-amd64.zip
          asset_name: fbcli-windows-amd64.zip
          asset_content_type: application/zip
