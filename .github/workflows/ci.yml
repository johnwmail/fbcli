name: CI and Release

on:
  push:
    branches: [ main ]
    tags:
      - 'v*'
  pull_request:
    branches: [ main ]

permissions:
  contents: write

jobs:
  test:
    name: Run Integration Tests
    runs-on: ubuntu-latest
    
    services:
      filebrowser:
        image: filebrowser/filebrowser
        ports:
          - 8080:80
        #options: --user=root
        
    steps:
      - name: Check out code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: '>=1.24'

      - name: Wait for filebrowser to be ready
        run: |
          echo "Waiting for filebrowser service to start..."
          until curl -s -o /dev/null http://localhost:8080/health; do
            echo -n .
            sleep 1
          done
          echo "Filebrowser is up!"

      - name: Create filebrowser test user
        id: fblog # Assign an ID to the step
        run: |
          docker logs ${{ job.services.filebrowser.id }} 2>&1 | awk '/password:/{print "fbpass="$NF}' >> $GITHUB_OUTPUT

      - name: Build fbcli
        run: go build -v -o fbcli

      - name: Run tests
        env:
          FILEBROWSER_URL: http://localhost:8080
          FILEBROWSER_USERNAME: admin
          FILEBROWSER_PASSWORD: ${{ steps.fblog.outputs.fbpass }}
        run: |
          set -e  # Exit immediately if a command fails
          
          echo "FILEBROWSER_URL: $FILEBROWSER_URL"
          echo "FILEBROWSER_USERNAME: $FILEBROWSER_USERNAME"
          echo "FILEBROWSER_PASSWORD: $FILEBROWSER_PASSWORD"

          echo "--- Creating test assets ---"
          echo "hello world" > testfile.txt
          mkdir -p 'local test dir'
          echo "nested file" > 'local test dir/nested.txt'
          
          echo "--- Testing mkdir ---"
          ./fbcli mkdir '/test dir'
          
          echo "--- Testing single file upload ---"
          ./fbcli upload testfile.txt '/test dir'
          
          echo "--- Verifying single file upload with ls ---"
          ./fbcli ls '/test dir' | grep 'testfile.txt'
          
          echo "--- Testing directory upload ---"
          ./fbcli upload 'local test dir' '/'
          
          echo "--- Verifying directory upload with ls ---"
          ./fbcli ls '/local test dir' | grep 'nested.txt'
          
          echo "--- Testing directory download ---"
          ./fbcli download '/local test dir' 'downloaded_dir' # will be downloaded_dir.zip
          
          echo "--- Verifying directory download ---"
          ls | grep 'downloaded_dir.zip'
          unzip -l downloaded_dir.zip | grep 'nested.txt'
          
          echo "--- Testing rename ---"
          ./fbcli mv '/test dir' '/renamed dir'
          
          echo "--- Verifying rename with ls ---"
          ./fbcli ls '/' | grep 'renamed dir'
          
          echo "--- Testing rm (cleanup) ---"
          ./fbcli rm '/renamed dir/testfile.txt'
          ./fbcli rm '/renamed dir'
          ./fbcli rm '/local test dir/nested.txt'
          ./fbcli rm '/local test dir'
          
          echo "--- Verifying deletion with ls ---"
          if ./fbcli ls '/' | grep -E 'renamed dir|local test dir'; then
            echo "Error: A directory still exists after deletion."
            exit 1
          fi
          
          echo "All tests passed!"

  build:
    name: Build Binaries
    runs-on: ubuntu-latest
    needs: test
    if: startsWith(github.ref, 'refs/tags/v')
    
    strategy:
      matrix:
        goos: [linux, windows]
        goarch: [amd64, arm64]
        exclude:
          - goos: windows
            goarch: arm64

    steps:
      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: '>=1.24'

      - name: Check out code
        uses: actions/checkout@v4

      - name: Build
        env:
          GOOS: ${{ matrix.goos }}
          GOARCH: ${{ matrix.goarch }}
        run: |
          BINARY_NAME="fbcli"
          if [ "${{ matrix.goos }}" = "windows" ]; then
            BINARY_NAME="fbcli.exe"
          fi
          go build -v -o "${BINARY_NAME}"
          
          ASSET_NAME="fbcli-${{ matrix.goos }}-${{ matrix.goarch }}"
          if [ "${{ matrix.goos }}" = "windows" ]; then
            zip "${ASSET_NAME}.zip" "${BINARY_NAME}"
          else
            tar -czvf "${ASSET_NAME}.tar.gz" "${BINARY_NAME}"
          fi

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: fbcli-artifacts
          path: |
            fbcli-*.tar.gz
            fbcli-*.zip
          retention-days: 1

  release:
    name: Create GitHub Release
    runs-on: ubuntu-latest
    needs: build
    if: startsWith(github.ref, 'refs/tags/v')
    
    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          name: fbcli-artifacts
          path: artifacts

      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: Release ${{ github.ref }}
          draft: false
          prerelease: false

      - name: Upload Release Assets
        run: |
          for file in artifacts/*; do
            echo "Uploading $file..."
            gh release upload ${{ github.ref }} "$file" --clobber
          done
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
